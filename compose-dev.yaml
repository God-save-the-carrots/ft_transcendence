version: "3.8"

services:
  frontend:
    image: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    container_name: ${FRONTEND_CONTAINER_NAME}
    build:
      context: ./frontend
    env_file:
      - .env
    stdin_open: true
    tty: true
    working_dir: /src
    ports:
      - 80:80 # TODO: remove
      - 443:443
      - 4000:4000
    volumes:
      - ./frontend:/var/www/html
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - db
      - backend

  backend:
    image: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    container_name: ${BACKEND_CONTAINER_NAME}
    build:
      context: ./backend
    env_file:
      - .env
    stdin_open: true
    tty: true
    working_dir: /src
    ports:
      - 8000:8000
    volumes:
      - ./backend:/src
      - run_vol:/var/run
      - cache_vol:/var/cache
    command: >
      sh -c "sh migrations.sh && python manage.py runserver 0.0.0.0:8000"
    environment:
      - POSTGRES_HOST=${DATABASE_CONTAINER_NAME}
    depends_on:
      - db

  db:
    image: postgres:16.1-alpine3.19
    container_name: ${DATABASE_CONTAINER_NAME}
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - ${DATABASE_VOLUME}:/var/lib/postgresql/data

  grafana:
    image: grafana/grafana:latest
    container_name: ${GRAFANA_CONTAINER_NAME}
    build:
      context: ./devops/grafana
    env_file:
      - .env
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DATABASE_HOST=db
      - GF_DATABASE_PORT=5432
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ${GRAFANA_VOLUME}:/etc/grafana/provisioning/datasources

  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    build:
      context: ./devops/prometheus
    env_file:
      - .env
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ${PROMETHEUS_VOLUME}:/etc/prometheus
      - prom_data:/etc/prometheus


volumes:
  run_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  cache_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  grafana_data:
  prom_data:
