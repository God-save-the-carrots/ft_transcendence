input {
	file {
		path => "/var/log/nginx/*.log"
		start_position => "beginning"
		codec => json_lines
		add_field => {"[@metadata][type]" => "nginx"}
	}
	http {
		port => 5044
		ssl_enabled => true
		ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
		ssl_certificate => "/usr/share/logstash/config/certs/logstash/logstash.crt"
		codec => json
		add_field => {"[@metadata][type]" => "access"}
	}
}
filter {
	if [@metadata][type] == "nginx" {
		grok {
			match => { "message" => "%{IPORHOST:clientip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} %{NUMBER:bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\""}
		}
	}

	if [@metadata][type] == "access" {
		if [http][method] != "POST" {
			drop {}
		}
		if ![ip] or ![intraid] {
			drop {}
		}

		geoip {
			source => "ip"
			target => "geoip"
		}
		if "_geoip_lookup_failure" in [tags] {
			drop {}
		}

		mutate {
			rename => {"[geoip][ip]" => "ip"}
			rename => {"[geoip][geo]" => "geo"}
			remove_field => ["geoip"]
			remove_field => ["@version", "host", "http", "url", "user_agent", "event"]
		}
	}
}
output {
	stdout {
		codec => rubydebug
	}
	elasticsearch {
		user => logstash_internal
		password => "${ELASTIC_PASSWORD}"
		hosts => ["${MONITORING_ELASTICSEARCH_HOSTS}"]
		ssl_enabled => true
		ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca/ca.crt"]
		index => "logstash-%{[@metadata][type]}-%{+YYYY.MM.dd}"
	}
}
