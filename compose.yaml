version: "3.8"
services:
  database:
    image: postgres:16.1-alpine3.19
    container_name: ${DATABASE_CONTAINER_NAME}
    restart: always
    volumes:
      - ${DATABASE_VOLUME}:/var/lib/postgresql/data:z
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4.8.1
    profiles:
      - debug
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - database

  frontend:
    build:
      context: srcs/frontend
      dockerfile: Dockerfile
    image: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    pull_policy: never
    container_name: ${FRONTEND_CONTAINER_NAME}
    restart: always
    env_file:
      - .env
    ports:
      - 80:80
    depends_on:
      - backend

  backend:
    build:
      context: srcs/backend
      dockerfile: Dockerfile
    image: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    pull_policy: never
    container_name: ${BACKEND_CONTAINER_NAME}
    command: python manage.py runserver 0.0.0.0:8000
    restart: always
    volumes:
      - ./srcs/backend:/app:z
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${DATABASE_CONTAINER_NAME}
    ports:
      - 8000:8000
