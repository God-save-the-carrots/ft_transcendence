version: "3.8"

services:
  frontend:
    init: true
    image: ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_TAG}
    container_name: ${FRONTEND_CONTAINER_NAME}
    build:
      context: ./frontend
    env_file:
      - .env
    stdin_open: true
    tty: true
    working_dir: /src
    ports:
      - 443:443
      - 4000:4000
    volumes:
      - ./frontend:/var/www/html
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - db
      - backend
      - logstash

  backend:
    init: true
    image: ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_TAG}
    container_name: ${BACKEND_CONTAINER_NAME}
    build:
      context: ./backend
    env_file:
      - .env
    stdin_open: true
    tty: true
    working_dir: /src
    volumes:
      - ./backend:/src
      - run_vol:/var/run
      - cache_vol:/var/cache
    command: >
      sh -c "sh migrations.sh && python manage.py runserver 0.0.0.0:8000"
    environment:
      - POSTGRES_HOST=${DATABASE_CONTAINER_NAME}
    depends_on:
      db:
        condition: service_healthy

  db:
    init: true
    image: postgres:16.1-alpine3.19
    container_name: ${DATABASE_CONTAINER_NAME}
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - ${DATABASE_VOLUME}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3

  grafana:
    init: true
    image: grafana/grafana:latest
    container_name: ${GRAFANA_CONTAINER_NAME}
    env_file:
      - .env
    build:
      context: ./devops/grafana
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./devops/grafana/src/grafana.ini:/etc/grafana/grafana.ini
      - ./devops/grafana/src/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./devops/grafana/src/dashboards.yaml:/usr/share/grafana/conf/provisioning/dashboards/dashboards.yaml
      - ./devops/grafana/grafana.crt:/etc/grafana/grafana.crt
      - ./devops/grafana/grafana.key:/etc/grafana/grafana.key

  prometheus:
    init: true
    image: prom/prometheus:latest
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    command:
      - '--storage.tsdb.path=/prometheus/data'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=5GB'
      - '--web.config.file=/etc/prometheus/web-config.yml'
      - '--config.file=/etc/prometheus/prometheus.yml'
    env_file:
      - .env
    ports:
      - 9090:9090
    volumes:
      - ./devops/prometheus:/etc/prometheus

volumes:
  run_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  cache_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  grafana_data:
  prom_data:
